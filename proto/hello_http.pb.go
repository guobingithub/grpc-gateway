// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/hello_http.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// HelloRequest 请求结构
type HelloHttpRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloHttpRequest) Reset()         { *m = HelloHttpRequest{} }
func (m *HelloHttpRequest) String() string { return proto.CompactTextString(m) }
func (*HelloHttpRequest) ProtoMessage()    {}
func (*HelloHttpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_http_56dc7bce06005d67, []int{0}
}
func (m *HelloHttpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloHttpRequest.Unmarshal(m, b)
}
func (m *HelloHttpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloHttpRequest.Marshal(b, m, deterministic)
}
func (dst *HelloHttpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloHttpRequest.Merge(dst, src)
}
func (m *HelloHttpRequest) XXX_Size() int {
	return xxx_messageInfo_HelloHttpRequest.Size(m)
}
func (m *HelloHttpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloHttpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloHttpRequest proto.InternalMessageInfo

func (m *HelloHttpRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// HelloReply 响应结构
type HelloHttpReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloHttpReply) Reset()         { *m = HelloHttpReply{} }
func (m *HelloHttpReply) String() string { return proto.CompactTextString(m) }
func (*HelloHttpReply) ProtoMessage()    {}
func (*HelloHttpReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_http_56dc7bce06005d67, []int{1}
}
func (m *HelloHttpReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloHttpReply.Unmarshal(m, b)
}
func (m *HelloHttpReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloHttpReply.Marshal(b, m, deterministic)
}
func (dst *HelloHttpReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloHttpReply.Merge(dst, src)
}
func (m *HelloHttpReply) XXX_Size() int {
	return xxx_messageInfo_HelloHttpReply.Size(m)
}
func (m *HelloHttpReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloHttpReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloHttpReply proto.InternalMessageInfo

func (m *HelloHttpReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloHttpRequest)(nil), "proto.HelloHttpRequest")
	proto.RegisterType((*HelloHttpReply)(nil), "proto.HelloHttpReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloHttpClient is the client API for HelloHttp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloHttpClient interface {
	// 定义SayHello方法
	SayHello(ctx context.Context, in *HelloHttpRequest, opts ...grpc.CallOption) (*HelloHttpReply, error)
}

type helloHttpClient struct {
	cc *grpc.ClientConn
}

func NewHelloHttpClient(cc *grpc.ClientConn) HelloHttpClient {
	return &helloHttpClient{cc}
}

func (c *helloHttpClient) SayHello(ctx context.Context, in *HelloHttpRequest, opts ...grpc.CallOption) (*HelloHttpReply, error) {
	out := new(HelloHttpReply)
	err := c.cc.Invoke(ctx, "/proto.HelloHttp/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloHttpServer is the server API for HelloHttp service.
type HelloHttpServer interface {
	// 定义SayHello方法
	SayHello(context.Context, *HelloHttpRequest) (*HelloHttpReply, error)
}

func RegisterHelloHttpServer(s *grpc.Server, srv HelloHttpServer) {
	s.RegisterService(&_HelloHttp_serviceDesc, srv)
}

func _HelloHttp_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloHttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloHttpServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HelloHttp/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloHttpServer).SayHello(ctx, req.(*HelloHttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HelloHttp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HelloHttp",
	HandlerType: (*HelloHttpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloHttp_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hello_http.proto",
}

func init() { proto.RegisterFile("proto/hello_http.proto", fileDescriptor_hello_http_56dc7bce06005d67) }

var fileDescriptor_hello_http_56dc7bce06005d67 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x48, 0xcd, 0xc9, 0xc9, 0x8f, 0xcf, 0x28, 0x29, 0x29, 0xd0, 0x03, 0x0b, 0x08,
	0xb1, 0x82, 0x29, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0xfd, 0xc4, 0x82, 0x4c, 0xfd,
	0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x88, 0x22, 0x25, 0x35, 0x2e,
	0x01, 0x0f, 0x90, 0x46, 0x8f, 0x92, 0x92, 0x82, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21,
	0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b,
	0x49, 0x8b, 0x8b, 0x0f, 0x49, 0x5d, 0x41, 0x4e, 0xa5, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71,
	0x71, 0x62, 0x3a, 0x4c, 0x21, 0x8c, 0x6b, 0x94, 0xc8, 0xc5, 0x09, 0x57, 0x2b, 0x14, 0xc2, 0xc5,
	0x11, 0x9c, 0x58, 0x09, 0xe6, 0x0b, 0x89, 0x43, 0x2c, 0xd5, 0x43, 0xb7, 0x51, 0x4a, 0x14, 0x53,
	0xa2, 0x20, 0xa7, 0x52, 0x49, 0xa2, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0x42, 0x4a, 0xbc, 0xfa, 0xa9,
	0x15, 0x89, 0xb9, 0x05, 0x39, 0xa9, 0xfa, 0xa9, 0xc9, 0x19, 0xf9, 0x56, 0x8c, 0x5a, 0x49, 0x6c,
	0x60, 0xf5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x65, 0xa9, 0xab, 0xfc, 0x00, 0x00,
	0x00,
}
